// Path to folder of images
setOption("JFileChooser", true);
 
dir=“/directory/to/your/picture/folder/“; // Use this line to hard code folder path. Change path to your your image folder

//dir=getDirectory("Choose a Folder of Images"); // Use this line to get a pop-up window to select image folder.

// Clear log window
print("\\Clear");

debugMode=true; // Change to 'true' to output intermediate steps  

// Remove any existing scale
run("Set Measurements...", "area centroid perimeter bounding shape redirect=None decimal=3");

setBackgroundColor(255, 255, 255);

// Create output folder within directory
File.makeDirectory(dir+"Output"+File.separator);

// List files within directory
list = getFileList(dir);

setBatchMode(true);

// Loop through all files:
for(i=0;i<list.length;i++){

	// Closes any open images:	
	while (nImages>0) { 
        selectImage(nImages); 
        close(); 
    } 
	
	// Close any open results windows
	if(isOpen("Results")){
		selectWindow("Results");
		run("Close");
	}
	
	// File path:
	path = dir+list[i];
	
	// Open file if jpeg:
	if (endsWith(list[i], ".JPG") | endsWith(list[i], ".jpg")) {
	
		open(path);

		// Rotate image if portrait:
		getDimensions(width, height, channels, slices, frames);

		if(width<height){

			run("Rotate 90 Degrees Right");

		}

		// Set scale. Assumes 3000x4000 pixel images
		run("Set Scale...", "distance=3755 known=900 unit=mm global");

		// Calculate pixel resolution:
		getPixelSize(unit, pixelWidth, pixelHeight);
		res=1/pixelWidth;

		// Get file name without extension
		nameshort = File.nameWithoutExtension; 
	
		// Rename image
		rename(nameshort);
	
		// Duplicate image for threshold steps
		run("Duplicate...", "title=threshold_1");
		run("Duplicate...", "title=threshold_2");


		// First threshold to remove noise that may interfere with leaf thresholding:
		
		if(debugMode==true){
			print("Path= "+path);
			print("begin threshold 1");
		}		
		
		selectWindow("threshold_1");
		// Colour Thresholding-------------
		// Color Thresholder 1.51a
		// Autogenerated macro, single images only!
		min=newArray(3);
		max=newArray(3);
		filter=newArray(3);
		a=getTitle();
		call("ij.plugin.frame.ColorThresholder.RGBtoLab");
		run("RGB Stack");
		run("Convert Stack to Images");
		selectWindow("Red");
		rename("0");
		selectWindow("Green");
		rename("1");
		selectWindow("Blue");
		rename("2");
		min[0]=0;
		max[0]=255;
		filter[0]="pass";
		min[1]=150;
		max[1]=255;
		filter[1]="pass";
		min[2]=0;
		max[2]=255;
		filter[2]="pass";
		for (k=0;k<3;k++){
		  selectWindow(""+k);
		  setThreshold(min[k], max[k]);
		  run("Convert to Mask");
		  if (filter[k]=="stop")  run("Invert");
		}
		imageCalculator("AND create", "0","1");
		imageCalculator("AND create", "Result of 0","2");
		for (k=0;k<3;k++){
		  selectWindow(""+k);
		  close();
		}
		selectWindow("Result of 0");
		close();
		selectWindow("Result of Result of 0");
		rename(a);
		// Colour Thresholding-------------
		
		if(debugMode==true){
			print("end threshold 1");
		}
		
		// create mask from thresholded image:
		setOption("BlackBackground", false);
		run("Convert to Mask");
		// Close any open results windows
		if(isOpen("Results")){
			selectWindow("Results");
			run("Close");
		}
		// Determine if any noise was detected:
		run("Analyze Particles...", "size=1-Infinity show=Nothing display clear");
		
		noiseMask=false;
		if(nResults()>0){
			noiseMask=true;
		}
		
		if(debugMode==true){		
			saveAs("JPG", dir+"/Output/"+nameshort+"threshold1mask.jpg");
			rename("threshold_1");
		}
		


		// Threshold to select leaves:
		if(debugMode==true){
			print("begin threshold 2");
		}
		selectWindow("threshold_2");
		
		// Color Thresholder 1.51a
		// Autogenerated macro, single images only!
		min=newArray(3);
		max=newArray(3);
		filter=newArray(3);
		a=getTitle();
		call("ij.plugin.frame.ColorThresholder.RGBtoLab");
		run("RGB Stack");
		run("Convert Stack to Images");
		selectWindow("Red");
		rename("0");
		selectWindow("Green");
		rename("1");
		selectWindow("Blue");
		rename("2");
		// Select background:
		
		min[0]=0;
		max[0]=255;
		filter[0]="pass";
		min[1]=124;
		max[1]=255;
		filter[1]="pass";
		min[2]=108;
		max[2]=145;
		filter[2]="pass";
		
		/*
		// Select leaf:
		min[0]=0;
		max[0]=255;
		filter[0]="pass";
		min[1]=0;
		max[1]=124;
		filter[1]="pass";
		min[2]=0;
		max[2]=255;
		filter[2]="pass";
		*/
		
		for (k=0;k<3;k++){
		  selectWindow(""+k);
		  setThreshold(min[k], max[k]);
		  run("Convert to Mask");
		  if (filter[k]=="stop")  run("Invert");
		}
		imageCalculator("AND create", "0","1");
		imageCalculator("AND create", "Result of 0","2");
		for (k=0;k<3;k++){
		  selectWindow(""+k);
		  close();
		}
		selectWindow("Result of 0");
		close();
		selectWindow("Result of Result of 0");
		rename(a);
		// Colour Thresholding-------------
		
		if(debugMode==true){
			print("end threshold 2");	
		}	

		// Create mask from thresholded image:
		setOption("BlackBackground", false);
		run("Convert to Mask");
		//run("Invert");

		if(debugMode==true){
			saveAs("JPG", dir+"/Output/"+nameshort+"threshold2mask.jpg");
			rename("threshold_2");
		}
		
		// If any noise was detected during first threshold step, remove from leaf threshold:
		if(noiseMask==true){
			selectWindow("threshold_1");
			run("Create Selection");
			selectWindow("threshold_2");
			run("Restore Selection");
			run("Cut");
			run("Select None");
			// Measure leaf area:
			run("Analyze Particles...", "size=10000-Infinity show=[Bare Outlines] display clear include");
			selectWindow("Drawing of threshold_2");
			rename("outline");
			
		}else{
		
			selectWindow("threshold_2");
			// Measure leaf area:
			run("Analyze Particles...", "size=10000-Infinity show=[Bare Outlines] display clear include");
			selectWindow("Drawing of threshold_2");
			remname("outline");
		}
		
		if(debugMode==true){
			r=nResults();	
			print(r);
		}
		
		// Loop through results table if open:
		if(isOpen("Results")){

			// Draw leaf outlines:
			selectWindow("outline");
			run("Dilate");
			run("Create Selection");
			run("RGB Color");
			setForegroundColor(255, 0, 255);
			run("Fill", "slice");
			run("Select None");
			run("Copy");
			setPasteMode("Transparent-white");
			selectWindow(nameshort);
			//run("RGB Color");
			run("Paste");
			run("Select None");
		
			if(debugMode==true){
				saveAs("JPG", dir+"/Output/"+nameshort+"outline.jpg");
				rename(nameshort);
			}
		
			for(j=0;j<nResults;j++){
	
				// Get leaf bounding rectangle
				BY=getResult("BY", j);
				H=getResult("Height", j);
				area=getResult("Area", j);
				feret=getResult("Feret",j);
				minFeret=getResult("MinFeret",j);
				
				//feretX=getResult("FeretX",j);
				//feretY=getResult("FeretY",j);
		
		
				IJ.renameResults("Results", "Stuff");
		wait(300);
				selectWindow(nameshort);
		
				// Cut leaf out of image		
				makeRectangle(0, BY*res, 4000, H*res);
				run("Duplicate...", "title=leaf");
				selectWindow("leaf");
				run("Duplicate...", "title=leaf8bit");
				run("8-bit");
		wait(300);		
				//run QR decoder plugin
				run("QR Decoder", "error=FAILED");
				selectWindow("QR Code");
				name=getInfo("window.contents");
				selectWindow("QR Code");
			wait(300);
				run("Close");
				name=replace(name, "\\n", ""); // Remove new line from end of string
		wait(300);
				// If QR code not read, create sample name based on image name + leaf number. eg: IMG_0001_leaf1
				if(name == "FAILED"){
		
					name=nameshort + "_leaf" + j+1;
		
				}
	
				// Print sample name in log window
				print("sampleName= "+name);
		wait(300);
				selectWindow("leaf8bit");
			wait(300);
				run("Close");
				
				// Name leaf image with sample name
				selectWindow("leaf");
				rename(name);
		wait(300);
				// Save leaf image
				saveAs("JPG", dir+"/Output/"+name+".jpg");
				//run("Close");
		wait(300);		
				// Add results to output table
				if(isOpen("Output")){
		
					IJ.renameResults("Output", "Results");
		
				}
	
				a=nResults();
		
				setResult("name", a, name);
				setResult("area", a, area); 
	
				IJ.renameResults("Results", "Output");
		wait(300);
				IJ.renameResults("Stuff", "Results");
		wait(300);
			}
		}

	}

}

// Save output

// Close results
if(isOpen("Results")){
	selectWindow("Results");
	run("Close");
}

if(isOpen("Output")){
	IJ.renameResults("Output", "Results");
	saveAs("Results", dir+"/Output/output.csv");
	selectWindow("Results");
	run("Close");
	
}	

print("Done...");

// End macro	